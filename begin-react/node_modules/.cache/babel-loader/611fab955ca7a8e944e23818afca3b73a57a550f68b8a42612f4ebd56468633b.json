{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\ude\\\\begin-react\\\\src\\\\App2.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport UserList from \"./UserList2\";\nimport CreateUser from \"./CreateUser\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction countActiveUsers(users) {\n  console.log('활성사용자 수를 세는중...');\n  return users.filter(user => user.active) /* active인 user만 다시 */.length; /* 그리고 그 개수를 구함 */\n}\nconst initialState = {\n  inputs: {\n    username: '',\n    email: ''\n  },\n  users: [{}]\n};\nfunction App2() {\n  _s();\n  const [inputs, setInputs] = useState({\n    username: \"\",\n    email: \"\"\n  });\n  const {\n    username,\n    email\n  } = inputs;\n\n  /* 기존에 const onChange = (e) => {\r\n    이렇게 두면 컴포넌트가 리렌더링 될떄마다 새로 함수를 선언, 생성하므로\r\n    useCallback을 이용해  */\n  const onChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    });\n  }, []);\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: \"velopert\",\n    email: \"public.velopert@gmail.com\",\n    active: true\n  }, {\n    id: 2,\n    username: \"tester\",\n    email: \"tester@example.com\",\n    active: false\n  }, {\n    id: 3,\n    username: \"liz\",\n    email: \"liz@example.com\",\n    active: false\n  }]);\n  const nextId = useRef(4);\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n    setUsers([...users, user]);\n    /* 또는 setUsers(users.concat(user)) */\n\n    setInputs({\n      username: \"\",\n      email: \"\"\n    });\n    nextId.current += 1;\n  }, [users, username, email]);\n  const onRemove = useCallback(id => {\n    setUsers(users.filter(user => user.id !== id));\n  }, []);\n  const onToggle = useCallback(id => {\n    setUsers(users.map(user => user.id === id ? {\n      ...user,\n      active: !user.active\n    } : user));\n  }, []); /* UserList에서 클릭 : onToggle로 user.id 가져옴 ->\r\n          다시 user 배열 잡는데. 이 때 id가 같은거, 즉 클릭한(토글한) user는\r\n          active의 true-false값을 반전시키고, 나머지는(클릭하지 않은) user는\r\n          그대로 둠. 이러면 중복 토글 체크가 됨. */\n\n  /* const count=countActiveUsers(users); 이렇게 두면, \r\n  */\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  /* memorize : 기억하다는 뜻으로. [users] 배열을 기억해놨다가,\r\n  이 값이 변경될 때에만 countActiveUsers를 호출한다는 의미. \r\n  다시 말해 기존에는 CreateUser의 input이 변경될 때에도(= onChange)\r\n  countActiveUsers 함수가 호출되어 낭비가 있었는데,\r\n  이번엔 users 배열의 변경에만 이 함수를 호출한다는 것..  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      username: username,\n      email: email,\n      onChange: onChange,\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), \"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790 \\uC218 : \", count]\n  }, void 0, true);\n}\n_s(App2, \"6baLqIJhHvLKF4+K91hIajdqtc8=\");\n_c = App2;\nexport default App2;\nvar _c;\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"names":["React","useCallback","useMemo","useRef","useState","UserList","CreateUser","jsxDEV","_jsxDEV","Fragment","_Fragment","countActiveUsers","users","console","log","filter","user","active","length","initialState","inputs","username","email","App2","_s","setInputs","onChange","e","name","value","target","setUsers","id","nextId","onCreate","current","onRemove","onToggle","map","count","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/ude/begin-react/src/App2.js"],"sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport UserList from \"./UserList2\";\r\nimport CreateUser from \"./CreateUser\";\r\n\r\nfunction countActiveUsers(users) {\r\n  console.log('활성사용자 수를 세는중...');\r\n  return users.filter(user=>user.active) /* active인 user만 다시 */\r\n  .length; /* 그리고 그 개수를 구함 */\r\n}\r\n\r\nconst initialState={\r\n  inputs:{\r\n    username:'', email:''\r\n  },\r\n  users: [\r\n    {}\r\n  ]\r\n}\r\n\r\nfunction App2() {\r\n  const [inputs, setInputs] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const { username, email } = inputs;\r\n\r\n  /* 기존에 const onChange = (e) => {\r\n    이렇게 두면 컴포넌트가 리렌더링 될떄마다 새로 함수를 선언, 생성하므로\r\n    useCallback을 이용해  */\r\n  const onChange = useCallback(e => {\r\n    const { name, value } = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  }, []); \r\n\r\n  const [users, setUsers] = useState([\r\n    {\r\n      id: 1,\r\n      username: \"velopert\",\r\n      email: \"public.velopert@gmail.com\",\r\n      active:true\r\n    },\r\n    {\r\n      id: 2,\r\n      username: \"tester\",\r\n      email: \"tester@example.com\",\r\n      active:false\r\n    },\r\n    {\r\n      id: 3,\r\n      username: \"liz\",\r\n      email: \"liz@example.com\",\r\n      active:false\r\n    },\r\n  ]);\r\n\r\n  const nextId = useRef(4);\r\n\r\n  const onCreate = useCallback(() => {\r\n    const user={\r\n      id:nextId.current,\r\n      username,\r\n      email\r\n    }\r\n    setUsers([...users,user]);\r\n    /* 또는 setUsers(users.concat(user)) */\r\n\r\n\r\n    setInputs({ username: \"\", email: \"\" });\r\n    nextId.current += 1;\r\n  }, [users, username, email]);\r\n\r\n  const onRemove=useCallback(id=>{\r\n    setUsers(users.filter(user=>user.id!==id));\r\n  }, []); \r\n\r\n  const onToggle=useCallback(id=>{\r\n    setUsers(users.map(user=>\r\n      user.id===id?{...user, active:!user.active} : user))\r\n  }, []); /* UserList에서 클릭 : onToggle로 user.id 가져옴 ->\r\n  다시 user 배열 잡는데. 이 때 id가 같은거, 즉 클릭한(토글한) user는\r\n  active의 true-false값을 반전시키고, 나머지는(클릭하지 않은) user는\r\n  그대로 둠. 이러면 중복 토글 체크가 됨. */\r\n\r\n  /* const count=countActiveUsers(users); 이렇게 두면, \r\n  */\r\n  const count=useMemo(()=>countActiveUsers(users),[users]);\r\n  /* memorize : 기억하다는 뜻으로. [users] 배열을 기억해놨다가,\r\n  이 값이 변경될 때에만 countActiveUsers를 호출한다는 의미. \r\n  다시 말해 기존에는 CreateUser의 input이 변경될 때에도(= onChange)\r\n  countActiveUsers 함수가 호출되어 낭비가 있었는데,\r\n  이번엔 users 배열의 변경에만 이 함수를 호출한다는 것..  */\r\n\r\n  return (\r\n    <>\r\n      {/* 상태관리를 위에서 하고, 그 값만 prop 인자로 넣기 */}\r\n      <CreateUser\r\n        username={username}\r\n        email={email}\r\n        onChange={onChange}\r\n        onCreate={onCreate}\r\n      />\r\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\r\n      활성사용자 수 : {count}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}